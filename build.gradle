group 'com.macedon.almagest'
version '1.0-SNAPSHOT'

ext {
    jerseyVersion = 2.22
}


allprojects {
    apply plugin: 'java'

    sourceCompatibility = 1.8

    repositories {
        mavenCentral()
    }

    dependencies {
        testCompile 'junit:junit:4.11'
    }
}

project(':city-service'){
    apply plugin: 'war'
    apply plugin: 'jetty'
    apply plugin: 'idea'

    // Jetty settings
    httpPort = 8080
    stopPort = 9080
    stopKey = "stopKey"

    def restAssuredVersion = '2.8.0'

    sourceSets {
        integrationTest {
            java {
                compileClasspath += main.output + test.output
                runtimeClasspath += main.output + test.output
                srcDir file('src/integration-test/java')
            }
            resources.srcDir file('src/integration-test/resources')
        }
    }

    configurations {
        integrationTestCompile.extendsFrom testCompile
        integrationTestRuntime.extendsFrom testRuntime
    }


    dependencies {
        compile "org.glassfish.jersey.containers:jersey-container-servlet:$jerseyVersion"
        compile "org.glassfish.jersey.media:jersey-media-json-jackson1:$jerseyVersion"
        integrationTestCompile "com.jayway.restassured:rest-assured:$restAssuredVersion"
        integrationTestCompile "com.jayway.restassured:json-path:$restAssuredVersion"
    }


    idea {
        module {
            scopes.TEST.plus += [ configurations.integrationTestCompile ]
        }
    }

    task integrationTest(type: Test) {
        doFirst {
            println "Starting integration tests..."

            [jettyRun, jettyRunWar]*.with {
                daemon = true
            }
            jettyRun.execute()
        }
        doLast {
            jettyStop.execute()
            println "Finished integration tests"
        }

        testClassesDir = sourceSets.integrationTest.output.classesDir
        classpath = sourceSets.integrationTest.runtimeClasspath
        // Ensures that integration tests are always run when invoked, regardless of whether changes were made.
        outputs.upToDateWhen { false }
    }


    //Ensure that the check task fails the build if there are failing integration tests.
    check.dependsOn integrationTest
    //Ensure that our unit tests are run before our integration tests
    integrationTest.mustRunAfter test


    // Sends the integration test results to there own directory, or else they'll overwrite unit test reports.
    tasks.withType(Test) {
        reports.html.destination = file("${reporting.baseDir}/${name}")
    }

}

task wrapper(type:  Wrapper){
    gradleVersion = '2.4'
}


